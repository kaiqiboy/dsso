[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\kaiqi001\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\kaiqi001\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 14.0.1)
[debug]       Load.loadUnit: plugins took 121.4693ms
[debug]       Load.loadUnit: defsScala took 0.3573ms
[debug] [Loading] Scanning directory C:\Users\kaiqi001\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\kaiqi001\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 19.6457 ms
[debug]           Load.resolveProject(global-plugins) took 54.0158ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\kaiqi001\.sbt\1.0\plugins, plugins: List(<none>))) took 94.4409ms
[debug] [Loading] Done in C:\Users\kaiqi001\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 121.1283ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2996ms
[debug]     Load.loadUnit(file:/C:/Users/kaiqi001/.sbt/1.0/plugins/, ...) took 253.1392ms
[debug]   Load.apply: load took 447.9951ms
[debug]   Load.apply: resolveProjects took 6.6899ms
[debug]   Load.apply: finalTransforms took 85.5772ms
[debug]   Load.apply: config.delegates took 8.0376ms
[debug]   Load.apply: Def.make(settings)... took 481.8428ms
[debug]   Load.apply: structureIndex took 125.9787ms
[debug]   Load.apply: mkStreams took 1.3745ms
[info] loading global plugins from C:\Users\kaiqi001\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4275.3315ms
[debug]           Load.loadUnit: plugins took 42.5297ms
[debug]           Load.loadUnit: defsScala took 0.0044ms
[debug] [Loading] Scanning directory C:\Users\kaiqi001\Desktop\sql-opt\project
[debug]             Load.loadUnit: mkEval took 9.4029ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\kaiqi001\Desktop\sql-opt\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.2745 ms
[info] loading settings for project sql-opt-build from idea.sbt ...
[debug]               Load.resolveProject(sql-opt-build) took 9.6295ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sql-opt-build, base: C:\Users\kaiqi001\Desktop\sql-opt\project, plugins: List(<none>))) took 13.6457ms
[debug] [Loading] Done in C:\Users\kaiqi001\Desktop\sql-opt\project, returning: (sql-opt-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2906.5915ms
[debug]           Load.loadUnit: cleanEvalClasses took 12.2189ms
[debug]         Load.loadUnit(file:/C:/Users/kaiqi001/Desktop/sql-opt/project/, ...) took 2963.0211ms
[debug]       Load.apply: load took 2965.485ms
[debug]       Load.apply: resolveProjects took 0.1284ms
[debug]       Load.apply: finalTransforms took 13.6134ms
[debug]       Load.apply: config.delegates took 0.6823ms
[debug]       Load.apply: Def.make(settings)... took 87.7483ms
[debug]       Load.apply: structureIndex took 35.0331ms
[debug]       Load.apply: mkStreams took 0.0031ms
[info] loading project definition from C:\Users\kaiqi001\Desktop\sql-opt\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 6172.1555ms
[debug]     Load.loadUnit: defsScala took 0.0041ms
[debug] [Loading] Scanning directory C:\Users\kaiqi001\Desktop\sql-opt
[debug]       Load.loadUnit: mkEval took 0.5654ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\kaiqi001\Desktop\sql-opt, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.8233 ms
[info] loading settings for project sql-opt from build.sbt ...
[debug]         Load.resolveProject(sql-opt) took 34.3674ms
[debug]       Load.loadTransitive: finalizeProject(Project(id sql-opt, base: C:\Users\kaiqi001\Desktop\sql-opt, plugins: List(<none>))) took 39.8554ms
[debug] [Loading] Done in C:\Users\kaiqi001\Desktop\sql-opt, returning: (sql-opt)
[debug]     Load.loadUnit: loadedProjectsRaw took 1335.4201ms
[debug]     Load.loadUnit: cleanEvalClasses took 69.1431ms
[debug]   Load.loadUnit(file:/C:/Users/kaiqi001/Desktop/sql-opt/, ...) took 7578.2017ms
[debug] Load.apply: load took 7580.6684ms
[debug] Load.apply: resolveProjects took 0.1396ms
[debug] Load.apply: finalTransforms took 24.1507ms
[debug] Load.apply: config.delegates took 0.4066ms
[debug] Load.apply: Def.make(settings)... took 63.2887ms
[debug] Load.apply: structureIndex took 27.4502ms
[debug] Load.apply: mkStreams took 0.0024ms
[info] set current project to sql-opt (in build file:/C:/Users/kaiqi001/Desktop/sql-opt/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 64586 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 64586, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to sql-opt (in build file:/C:/Users/kaiqi001/Desktop/sql-opt/)
[debug] > Exec(idea-shell, None, None)
